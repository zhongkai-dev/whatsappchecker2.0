<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Dashboard - WhatsApp Checker</title>
    <style>
        :root {
            --primary: #25D366;
            --dark: #1a1a1a;
            --light: #ffffff;
            --gray: #242424;
            --gray-light: #2a2a2a;
            --danger: #ff4444;
            --success: #00C851;
            --warning: #ffbb33;
            --info: #33b5e5;
            --font-mono: 'Courier New', monospace;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            background-color: var(--dark);
            color: var(--light);
            font-family: 'Segoe UI', Arial, sans-serif;
            line-height: 1.6;
            min-height: 100vh;
            overflow-x: hidden;
            position: relative;
        }

        /* Background pattern */
        .bg-pattern {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-image: radial-gradient(var(--gray-light) 1px, transparent 1px);
            background-size: 20px 20px;
            opacity: 0.08;
            z-index: -1;
        }

        /* Container */
        .container {
            display: grid;
            grid-template-columns: 1fr;
            min-height: 100vh;
        }

        /* Sidebar */
        .sidebar {
            display: none; /* Hide the sidebar */
        }

        /* Main Content */
        .main {
            padding: 2rem;
            margin-left: 0;
            width: 100%;
        }

        /* Header */
        .header {
            display: flex;
            flex-direction: column;
            margin-bottom: 2rem;
            padding-bottom: 1rem;
            border-bottom: 1px solid var(--gray-light);
        }

        .header-top {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1rem;
        }

        .page-title {
            font-size: 1.5rem;
            color: var(--primary);
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .page-title svg {
            width: 30px;
            height: 30px;
            fill: var(--primary);
        }

        /* Top Navigation */
        .top-nav {
            display: flex;
            flex-wrap: wrap;
            gap: 0.5rem;
            margin-bottom: 1rem;
        }

        .nav-tab {
            padding: 0.5rem 1rem;
            background-color: var(--gray);
            color: var(--light);
            border-radius: 4px;
            text-decoration: none;
            display: flex;
            align-items: center;
            gap: 0.5rem;
            transition: all 0.2s;
        }

        .nav-tab:hover {
            background-color: rgba(37, 211, 102, 0.2);
        }

        .nav-tab.active {
            background-color: var(--primary);
            color: var(--dark);
            font-weight: bold;
        }

        .nav-tab i {
            font-size: 1.2rem;
        }

        .user-menu {
            display: flex;
            align-items: center;
        }

        .user-info {
            margin-right: 1rem;
            text-align: right;
        }

        .user-name {
            font-weight: bold;
        }

        .user-role {
            font-size: 0.8rem;
            opacity: 0.7;
        }

        .avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background-color: var(--primary);
            display: flex;
            justify-content: center;
            align-items: center;
            color: var(--dark);
            font-weight: bold;
        }

        /* Dashboard Cards */
        .dashboard-section {
            margin-bottom: 2rem;
        }

        .section-title {
            font-size: 1.2rem;
            color: var(--primary);
            margin-bottom: 1rem;
            padding-bottom: 0.5rem;
            border-bottom: 1px solid var(--gray-light);
        }

        .stats-grid {
            display: grid;
            grid-template-columns: repeat(6, 1fr);
            gap: 1rem;
            margin-bottom: 1.5rem;
        }

        .stat-card {
            background-color: var(--gray);
            border-radius: 8px;
            padding: 1.5rem;
            position: relative;
            overflow: hidden;
            transition: transform 0.2s;
        }

        .stat-card:hover {
            transform: translateY(-5px);
        }

        .stat-icon {
            position: absolute;
            top: 1rem;
            right: 1rem;
            font-size: 2rem;
            opacity: 0.15;
        }

        .stat-value {
            font-size: 2rem;
            font-weight: bold;
            margin-bottom: 0.5rem;
        }

        .stat-label {
            font-size: 0.9rem;
            opacity: 0.7;
        }

        .stat-primary { color: var(--primary); }
        .stat-info { color: var(--info); }
        .stat-warning { color: var(--warning); }
        .stat-danger { color: var(--danger); }
        .stat-success { color: var(--success); }

        /* WhatsApp Status Card */
        .whatsapp-status {
            background-color: var(--gray);
            border-radius: 8px;
            padding: 1.5rem;
            margin-bottom: 1.5rem;
        }

        .status-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1rem;
        }

        .status-indicator {
            display: flex;
            align-items: center;
        }

        .status-dot {
            width: 12px;
            height: 12px;
            border-radius: 50%;
            margin-right: 0.5rem;
        }

        .status-dot.online { background-color: var(--success); }
        .status-dot.offline { background-color: var(--danger); }
        .status-dot.connecting { background-color: var(--warning); }

        .qr-container {
            display: none;
            justify-content: center;
            margin: 1rem 0;
            padding: 1rem;
            background-color: #fff;
            border-radius: 8px;
        }

        /* Tables */
        .data-table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 1rem;
            margin-bottom: 1.5rem;
            font-size: 0.9rem;
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
            border-radius: 8px;
            overflow: hidden;
        }

        .data-table th, 
        .data-table td {
            padding: 1rem;
            text-align: left;
            border-bottom: 1px solid var(--gray-light);
        }

        .data-table th {
            background-color: rgba(37, 211, 102, 0.1);
            color: var(--primary);
            font-weight: bold;
            white-space: nowrap;
        }

        .data-table tbody tr:hover {
            background-color: rgba(255, 255, 255, 0.05);
        }

        .data-table tbody tr:last-child td {
            border-bottom: none;
        }

        .code-cell {
            font-family: var(--font-mono);
            max-width: 200px;
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
        }

        /* Tabs */
        .tabs {
            display: flex;
            margin-bottom: 1rem;
            border-bottom: 1px solid var(--gray-light);
        }

        .tab {
            padding: 0.75rem 1.5rem;
            cursor: pointer;
            border-bottom: 2px solid transparent;
            transition: all 0.2s;
        }

        .tab:hover {
            background-color: rgba(255, 255, 255, 0.05);
        }

        .tab.active {
            color: var(--primary);
            border-bottom-color: var(--primary);
        }

        .tab-content {
            display: none;
        }

        .tab-content.active {
            display: block;
        }

        /* Forms */
        .form-card {
            background-color: var(--gray);
            border-radius: 8px;
            padding: 1.5rem;
            margin-bottom: 1.5rem;
        }

        .form-group {
            margin-bottom: 1.5rem;
        }

        .form-group label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: bold;
        }

        .form-control {
            width: 100%;
            padding: 0.75rem;
            border-radius: 4px;
            background-color: var(--gray-light);
            border: 1px solid #333;
            color: var(--light);
            font-family: 'Segoe UI', Arial, sans-serif;
        }

        textarea.form-control {
            resize: vertical;
            min-height: 100px;
        }

        .btn {
            display: inline-block;
            padding: 0.75rem 1.5rem;
            border-radius: 4px;
            background-color: var(--primary);
            color: var(--dark);
            font-weight: bold;
            cursor: pointer;
            border: none;
            transition: opacity 0.2s, transform 0.2s;
        }

        .btn:hover {
            opacity: 0.9;
            transform: translateY(-2px);
        }

        .btn-sm {
            padding: 0.4rem 0.8rem;
            font-size: 0.9rem;
        }

        .btn-danger {
            background-color: var(--danger);
        }

        .btn-warning {
            background-color: var(--warning);
        }

        .btn-success {
            background-color: var(--success);
        }

        /* Alert Messages */
        .alert {
            padding: 1rem;
            margin-bottom: 1.5rem;
            border-radius: 4px;
            display: none;
        }

        .alert-success {
            background-color: rgba(0, 200, 81, 0.1);
            border-left: 4px solid var(--success);
        }

        .alert-error {
            background-color: rgba(255, 68, 68, 0.1);
            border-left: 4px solid var(--danger);
        }

        /* Toggle Switch */
        .switch {
            position: relative;
            display: inline-block;
            width: 48px;
            height: 24px;
        }

        .switch input {
            opacity: 0;
            width: 0;
            height: 0;
        }

        .slider {
            position: absolute;
            cursor: pointer;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: #555;
            transition: .4s;
            border-radius: 34px;
        }

        .slider:before {
            position: absolute;
            content: "";
            height: 18px;
            width: 18px;
            left: 3px;
            bottom: 3px;
            background-color: white;
            transition: .4s;
            border-radius: 50%;
        }

        input:checked + .slider {
            background-color: var(--primary);
        }

        input:checked + .slider:before {
            transform: translateX(24px);
        }

        /* Pagination */
        .pagination {
            display: flex;
            justify-content: center;
            margin-top: 1.5rem;
        }

        .pagination-item {
            width: auto;
            min-width: 36px;
            height: 36px;
            display: flex;
            justify-content: center;
            align-items: center;
            margin: 0 0.25rem;
            border-radius: 4px;
            padding: 0 0.5rem;
            cursor: default;
            transition: background-color 0.2s;
        }

        .pagination-item.clickable {
            cursor: pointer;
        }

        .pagination-item.clickable:hover {
            background-color: rgba(255, 255, 255, 0.1);
        }

        .pagination-item.active {
            background-color: var(--primary);
            color: var(--dark);
            font-weight: bold;
        }
        
        .pagination-item.disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }

        /* Loading */
        .loading {
            display: flex;
            justify-content: center;
            align-items: center;
            height: 200px;
        }

        .spinner {
            width: 50px;
            height: 50px;
            border: 5px solid var(--gray);
            border-top: 5px solid var(--primary);
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        /* Responsive */
        @media (max-width: 768px) {
            .container {
                grid-template-columns: 1fr;
            }
            
            .sidebar {
                width: 100%;
                height: auto;
                position: relative;
                display: none;
            }
            
            .main {
                margin-left: 0;
                width: 100%;
            }
            
            .stats-grid {
                grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            }
            
            .data-table {
                display: block;
                overflow-x: auto;
                white-space: nowrap;
            }
            
            .data-table th, 
            .data-table td {
                padding: 0.75rem;
            }
            
            .header-top {
                flex-direction: column;
                align-items: flex-start;
                gap: 1rem;
            }
            
            .user-menu {
                align-self: flex-end;
            }
            
            .form-card {
                padding: 1rem;
            }
        }

        @media (max-width: 1400px) {
            .stats-grid {
                grid-template-columns: repeat(3, 1fr);
            }
        }

        @media (max-width: 992px) {
            .stats-grid {
                grid-template-columns: repeat(2, 1fr);
            }
        }

        @media (max-width: 576px) {
            .stats-grid {
                grid-template-columns: 1fr;
            }
        }

        /* Icons */
        .material-icons {
            font-family: 'Material Icons';
            font-weight: normal;
            font-style: normal;
            font-size: 24px;
            line-height: 1;
            letter-spacing: normal;
            text-transform: none;
            display: inline-block;
            white-space: nowrap;
            word-wrap: normal;
            direction: ltr;
            -webkit-font-feature-settings: 'liga';
            -webkit-font-smoothing: antialiased;
        }
    </style>
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
</head>
<body>
    <div class="bg-pattern"></div>

    <div class="container">
        <!-- Main Content -->
        <main class="main">
            <header class="header">
                <div class="header-top">
                    <h1 class="page-title">
                        <svg xmlns="http://www.w3.org/2000/svg" width="30" height="30" viewBox="0 0 24 24">
                            <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm4-8c0 2.21-1.79 4-4 4s-4-1.79-4-4 1.79-4 4-4 4 1.79 4 4z"/>
                        </svg>
                        Dashboard Overview
                    </h1>
                    <div class="user-menu">
                        <div class="user-info">
                            <div class="user-name">Admin</div>
                            <div class="user-role">Administrator</div>
                        </div>
                        <div class="avatar">A</div>
                        <a href="#" id="logout-btn" style="margin-left: 1rem;">
                            <i class="material-icons">exit_to_app</i>
                        </a>
                    </div>
                </div>
                <div class="top-nav">
                    <a href="#dashboard" class="nav-tab active">
                        <i class="material-icons">dashboard</i>
                        Dashboard
                    </a>
                    <a href="#check-history" class="nav-tab">
                        <i class="material-icons">history</i>
                        Check History
                    </a>
                    <a href="#apikeys" class="nav-tab">
                        <i class="material-icons">vpn_key</i>
                        API Keys
                    </a>
                    <a href="#broadcast" class="nav-tab">
                        <i class="material-icons">send</i>
                        Broadcast
                    </a>
                    <a href="#whatsapp" class="nav-tab">
                        <i class="material-icons">chat</i>
                        WhatsApp
                    </a>
                    <a href="#account" class="nav-tab">
                        <i class="material-icons">account_circle</i>
                        Account
                    </a>
                </div>
            </header>

            <!-- Dashboard Tab Content -->
            <div id="dashboard-tab" class="tab-content active">
                <!-- Statistics Cards -->
                <section class="dashboard-section">
                    <h2 class="section-title">Statistics Overview</h2>
                    <div class="stats-grid">
                        <div class="stat-card">
                            <i class="material-icons stat-icon stat-primary">people</i>
                            <div class="stat-value stat-primary" id="total-users">0</div>
                            <div class="stat-label">Total Users</div>
                        </div>
                        <div class="stat-card">
                            <i class="material-icons stat-icon stat-info">search</i>
                            <div class="stat-value stat-info" id="total-checks">0</div>
                            <div class="stat-label">Total Checks</div>
                        </div>
                        <div class="stat-card">
                            <i class="material-icons stat-icon stat-success">person</i>
                            <div class="stat-value stat-success" id="today-active-users">0</div>
                            <div class="stat-label">Today's Active Users</div>
                        </div>
                        <div class="stat-card">
                            <i class="material-icons stat-icon stat-warning">today</i>
                            <div class="stat-value stat-warning" id="today-checks">0</div>
                            <div class="stat-label">Today's Checks</div>
                        </div>
                        <div class="stat-card">
                            <i class="material-icons stat-icon stat-danger">vpn_key</i>
                            <div class="stat-value stat-danger" id="apikey-users">0</div>
                            <div class="stat-label">API Key Users</div>
                        </div>
                        <div class="stat-card">
                            <i class="material-icons stat-icon stat-primary">data_usage</i>
                            <div class="stat-value stat-primary" id="apikey-usage">0</div>
                            <div class="stat-label">API Usage</div>
                        </div>
                    </div>
                </section>

                <!-- WhatsApp Status -->
                <section class="dashboard-section">
                    <h2 class="section-title">WhatsApp Status</h2>
                    <div class="whatsapp-status">
                        <div class="status-header">
                            <div class="status-indicator">
                                <div id="whatsapp-status-dot" class="status-dot connecting"></div>
                                <span id="whatsapp-status-text">Checking status...</span>
                            </div>
                            <button id="refresh-whatsapp-status" class="btn btn-sm">
                                <i class="material-icons">refresh</i> Refresh
                            </button>
                        </div>
                        <div id="qr-container" class="qr-container">
                            <!-- QR Code will be shown here when needed -->
                        </div>
                    </div>
                </section>

                <!-- Recent Checks -->
                <section class="dashboard-section">
                    <h2 class="section-title">Recent Checks</h2>
                    <div id="recent-checks-loading" class="loading">
                        <div class="spinner"></div>
                    </div>
                    <table class="data-table" id="recent-checks-table" style="display: none;">
                        <thead>
                            <tr>
                                <th>Time</th>
                                <th>User</th>
                                <th>Phone Number</th>
                                <th>Result</th>
                            </tr>
                        </thead>
                        <tbody id="recent-checks-body">
                            <!-- Recent checks will be loaded here -->
                        </tbody>
                    </table>
                </section>
            </div>

            <!-- Check History Tab Content -->
            <div id="check-history-tab" class="tab-content">
                <section class="dashboard-section">
                    <h2 class="section-title">Check History</h2>
                    
                    <div id="check-history-loading" class="loading">
                        <div class="spinner"></div>
                    </div>
                    <table class="data-table" id="check-history-table" style="display: none;">
                        <thead>
                            <tr>
                                <th>Time</th>
                                <th>User</th>
                                <th>Phone Number</th>
                                <th>Result</th>
                                <th>Source</th>
                            </tr>
                        </thead>
                        <tbody id="check-history-body">
                            <!-- Check history will be loaded here -->
                        </tbody>
                    </table>
                    
                    <!-- Pagination controls container -->
                    <div style="display: flex; justify-content: space-between; align-items: center; margin-top: 1rem;">
                        <!-- Page size selector -->
                        <div>
                            <label for="page-size-selector" style="margin-right: 0.5rem;">Show:</label>
                            <select id="page-size-selector" class="form-control" style="display: inline-block; width: auto; padding: 0.5rem;">
                                <option value="10">10</option>
                                <option value="20">20</option>
                                <option value="30">30</option>
                                <option value="50">50</option>
                                <option value="100">100</option>
                            </select>
                            <span style="margin-left: 0.5rem;">items per page</span>
                        </div>
                        
                        <!-- Pagination -->
                        <div class="pagination" id="check-history-pagination">
                            <!-- Pagination will be generated here -->
                        </div>
                    </div>
                </section>
            </div>

            <!-- API Keys Tab Content -->
            <div id="apikeys-tab" class="tab-content">
                <section class="dashboard-section">
                    <h2 class="section-title">API Keys Management</h2>
                    <div id="api-keys-alert" class="alert"></div>
                    <div id="api-keys-loading" class="loading">
                        <div class="spinner"></div>
                    </div>
                    <table class="data-table" id="api-keys-table" style="display: none;">
                        <thead>
                            <tr>
                                <th>Phone Number</th>
                                <th>API Key</th>
                                <th>Created</th>
                                <th>Last Used</th>
                                <th>Usage Count</th>
                                <th>Status</th>
                            </tr>
                        </thead>
                        <tbody id="api-keys-body">
                            <!-- API keys will be loaded here -->
                        </tbody>
                    </table>
                </section>
            </div>

            <!-- Broadcast Tab Content -->
            <div id="broadcast-tab" class="tab-content">
                <section class="dashboard-section">
                    <h2 class="section-title">Broadcast Message</h2>
                    <div id="broadcast-alert" class="alert"></div>
                    <div class="form-card">
                        <form id="broadcast-form">
                            <div class="form-group">
                                <label for="broadcast-message">Message Content</label>
                                <textarea id="broadcast-message" class="form-control" placeholder="Enter your message to broadcast to all Telegram users..." required></textarea>
                            </div>
                            <button type="submit" class="btn">
                                <i class="material-icons">send</i> Send Broadcast
                            </button>
                        </form>
                    </div>
                </section>
            </div>

            <!-- WhatsApp Status Tab Content -->
            <div id="whatsapp-tab" class="tab-content">
                <section class="dashboard-section">
                    <h2 class="section-title">WhatsApp Connection Status</h2>
                    <div class="whatsapp-status">
                        <div class="status-header">
                            <div class="status-indicator">
                                <div id="whatsapp-status-dot-tab" class="status-dot connecting"></div>
                                <span id="whatsapp-status-text-tab">Checking status...</span>
                            </div>
                            <button id="refresh-whatsapp-status-tab" class="btn btn-sm">
                                <i class="material-icons">refresh</i> Refresh
                            </button>
                        </div>
                        <div id="qr-container-tab" class="qr-container">
                            <!-- QR Code will be shown here when needed -->
                        </div>
                    </div>
                </section>
            </div>

            <!-- Account Tab Content -->
            <div id="account-tab" class="tab-content">
                <section class="dashboard-section">
                    <h2 class="section-title">Account Settings</h2>
                    <div id="account-alert" class="alert"></div>
                    <div class="form-card">
                        <form id="change-password-form">
                            <div class="form-group">
                                <label for="current-username">Current Username</label>
                                <input type="text" id="current-username" class="form-control" disabled>
                            </div>
                            <div class="form-group">
                                <label for="new-username">New Username</label>
                                <input type="text" id="new-username" class="form-control" required>
                            </div>
                            <div class="form-group">
                                <label for="current-password">Current Password</label>
                                <input type="password" id="current-password" class="form-control" required>
                            </div>
                            <div class="form-group">
                                <label for="new-password">New Password</label>
                                <input type="password" id="new-password" class="form-control" required>
                            </div>
                            <div class="form-group">
                                <label for="confirm-password">Confirm New Password</label>
                                <input type="password" id="confirm-password" class="form-control" required>
                            </div>
                            <button type="submit" class="btn">
                                <i class="material-icons">save</i> Save Changes
                            </button>
                        </form>
                    </div>
                </section>
            </div>

        </main>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Get token from URL
            const urlParams = new URLSearchParams(window.location.search);
            const token = urlParams.get('token');
            
            // Add token to fetch requests
            const originalFetch = window.fetch;
            window.fetch = function(url, options = {}) {
                // Check if URL already has parameters
                const hasParams = url.includes('?');
                const separator = hasParams ? '&' : '?';
                
                // Append token to URL if not already present
                if (!url.includes('token=')) {
                    url = `${url}${separator}token=${token}`;
                }
                
                return originalFetch(url, options);
            };
            
            // Configure logout button
            document.getElementById('logout-btn').addEventListener('click', function(e) {
                e.preventDefault();
                window.location.href = `/admin-logout?token=${token}`;
            });
            
            // Initialize tab navigation
            initializeTabNavigation();
            
            // Initialize the page size selector
            initializePageSizeSelector();
            
            // Load initial data
            loadDashboardStats();
            loadRecentChecks();
            checkWhatsAppStatus();

            // Refresh WhatsApp status button
            document.getElementById('refresh-whatsapp-status').addEventListener('click', () => checkWhatsAppStatus());
            document.getElementById('refresh-whatsapp-status-tab').addEventListener('click', () => checkWhatsAppStatus(true));

            // Broadcast form submission
            document.getElementById('broadcast-form').addEventListener('submit', sendBroadcast);

            // Change password form submission
            document.getElementById('change-password-form').addEventListener('submit', updateAdminCredentials);
            
            // Check if the check history tab is active initially, load it
            if (localStorage.getItem('activeTab') === 'check-history') {
                console.log('Check History is active tab, loading data...');
                setTimeout(() => {
                    loadCheckHistory(currentPage);
                }, 100);
            }
        });
            
        // ====== Dashboard Stats ======
        async function loadDashboardStats() {
            try {
                const response = await fetch('/admin/stats');
                
                if (!response.ok) {
                    throw new Error('Failed to load dashboard stats');
                }
                
                const stats = await response.json();
                
                // Update stat cards
                document.getElementById('total-users').textContent = stats.totalUsers;
                document.getElementById('total-checks').textContent = stats.totalChecks;
                document.getElementById('today-active-users').textContent = stats.todayActiveUsers;
                document.getElementById('today-checks').textContent = stats.todayChecks;
                document.getElementById('apikey-users').textContent = stats.apikeyUsers;
                document.getElementById('apikey-usage').textContent = stats.apikeyUsage;
            } catch (error) {
                console.error('Error loading dashboard stats:', error);
            }
        }
        
        // ====== Recent Checks ======
        async function loadRecentChecks() {
            const recentChecksTable = document.getElementById('recent-checks-table');
            const recentChecksBody = document.getElementById('recent-checks-body');
            const recentChecksLoading = document.getElementById('recent-checks-loading');
            
            try {
                recentChecksLoading.style.display = 'flex';
                recentChecksTable.style.display = 'none';
                
                const response = await fetch('/admin/recent-checks');
                
                if (!response.ok) {
                    throw new Error('Failed to load recent checks');
                }
                
                const checks = await response.json();
                
                // Clear table
                recentChecksBody.innerHTML = '';
                
                // Add recent checks to table
                checks.forEach(check => {
                    const row = document.createElement('tr');
                    
                    const date = new Date(check.timestamp);
                    const formattedDate = `${date.toLocaleDateString()} ${date.toLocaleTimeString()}`;
                    
                    row.innerHTML = `
                        <td>${formattedDate}</td>
                        <td>${check.username || 'N/A'}</td>
                        <td>${check.number}</td>
                        <td>${check.result.includes('✅') ? 
                            '<span style="color: var(--success)">Registered</span>' : 
                            '<span style="color: var(--danger)">Not Registered</span>'
                        }</td>
                    `;
                    
                    recentChecksBody.appendChild(row);
                });
                
                // Show table and hide loading
                recentChecksLoading.style.display = 'none';
                recentChecksTable.style.display = 'table';
            } catch (error) {
                console.error('Error loading recent checks:', error);
                recentChecksLoading.style.display = 'none';
            }
        }
        
        // ====== Check History ======
        let currentPage = 1;
        let itemsPerPage = 20; // Default value
        
        // Initialize the page size selector
        function initializePageSizeSelector() {
            const pageSizeSelector = document.getElementById('page-size-selector');
            if (pageSizeSelector) {
                console.log('Initializing page size selector');
                
                // Restore values from localStorage if available
                if (localStorage.getItem('checkHistoryPageSize')) {
                    itemsPerPage = parseInt(localStorage.getItem('checkHistoryPageSize'));
                }
                
                if (localStorage.getItem('checkHistoryCurrentPage')) {
                    currentPage = parseInt(localStorage.getItem('checkHistoryCurrentPage'));
                }
                
                // Set the selector to the saved value
                pageSizeSelector.value = itemsPerPage.toString();
                
                // Add event listener for changes
                pageSizeSelector.addEventListener('change', function() {
                    console.log('Page size changed to:', this.value);
                    itemsPerPage = parseInt(this.value);
                    // Save to localStorage
                    localStorage.setItem('checkHistoryPageSize', itemsPerPage.toString());
                    currentPage = 1; // Reset to first page
                    localStorage.setItem('checkHistoryCurrentPage', '1');
                    loadCheckHistory(currentPage);
                });
            } else {
                console.error('Page size selector not found');
            }
        }
        
        // Initialize tab navigation
        function initializeTabNavigation() {
            const navTabs = document.querySelectorAll('.nav-tab');
            const tabContents = document.querySelectorAll('.tab-content');
            const pageTitle = document.querySelector('.page-title');
            
            // Check if there's a saved active tab
            const savedActiveTab = localStorage.getItem('activeTab');
            
            // If no saved tab, set a default (optional)
            if (!savedActiveTab) {
                localStorage.setItem('activeTab', 'dashboard');
            }
            
            console.log('Initializing tab navigation, saved tab:', savedActiveTab);
            
            navTabs.forEach(tab => {
                const tabId = tab.getAttribute('href').substring(1);
                
                // If this tab matches the saved active tab, activate it
                if (savedActiveTab && tabId === savedActiveTab) {
                    console.log('Activating saved tab:', tabId);
                    
                    // Update active tab navigation
                    navTabs.forEach(navTab => navTab.classList.remove('active'));
                    tab.classList.add('active');
                    
                    // Update tab content visibility
                    tabContents.forEach(content => content.classList.remove('active'));
                    document.getElementById(`${tabId}-tab`).classList.add('active');
                    
                    // Update page title text
                    pageTitle.innerHTML = `
                        <svg xmlns="http://www.w3.org/2000/svg" width="30" height="30" viewBox="0 0 24 24">
                            <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm4-8c0 2.21-1.79 4-4 4s-4-1.79-4-4 1.79-4 4-4 4 1.79 4 4z"/>
                        </svg>
                        ${tab.textContent.trim()}
                    `;
                    
                    // Load initial data for the active tab
                    if (tabId === 'dashboard') {
                        loadDashboardStats();
                        loadRecentChecks();
                        checkWhatsAppStatus();
                    }
                }
                
                // Add click event listener to each tab
                tab.addEventListener('click', function(e) {
                    e.preventDefault();
                    
                    const tabId = this.getAttribute('href').substring(1);
                    console.log('Tab clicked:', tabId);
                    
                    // Save active tab to localStorage
                    localStorage.setItem('activeTab', tabId);
                    
                    // Update active tab navigation
                    navTabs.forEach(navTab => navTab.classList.remove('active'));
                    this.classList.add('active');
                    
                    // Update tab content visibility
                    tabContents.forEach(content => content.classList.remove('active'));
                    document.getElementById(`${tabId}-tab`).classList.add('active');
                    
                    // Update page title text
                    pageTitle.innerHTML = `
                        <svg xmlns="http://www.w3.org/2000/svg" width="30" height="30" viewBox="0 0 24 24">
                            <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm4-8c0 2.21-1.79 4-4 4s-4-1.79-4-4 1.79-4 4-4 4 1.79 4 4z"/>
                        </svg>
                        ${this.textContent.trim()}
                    `;
                    
                    // Load data based on active tab
                    if (tabId === 'dashboard') {
                        loadDashboardStats();
                        loadRecentChecks();
                        checkWhatsAppStatus();
                    } else if (tabId === 'check-history') {
                        loadCheckHistory(currentPage);
                    } else if (tabId === 'apikeys') {
                        loadApiKeys();
                    } else if (tabId === 'whatsapp') {
                        checkWhatsAppStatus(true);
                    } else if (tabId === 'account') {
                        loadAdminInfo();
                    }
                });
            });
        }
        
        // ====== API Keys ======
        async function loadApiKeys() {
            const apiKeysTable = document.getElementById('api-keys-table');
            const apiKeysBody = document.getElementById('api-keys-body');
            const apiKeysLoading = document.getElementById('api-keys-loading');
            const apiKeysAlert = document.getElementById('api-keys-alert');
            
            try {
                apiKeysLoading.style.display = 'flex';
                apiKeysTable.style.display = 'none';
                
                const response = await fetch('/admin/api-keys');
                
                if (!response.ok) {
                    throw new Error('Failed to load API keys');
                }
                
                const apiKeys = await response.json();
                
                // Clear table
                apiKeysBody.innerHTML = '';
                
                // Add API keys to table
                apiKeys.forEach(key => {
                    const row = document.createElement('tr');
                    
                    const createdDate = key.createdAt ? new Date(key.createdAt).toLocaleDateString() : 'N/A';
                    const lastUsedDate = key.lastUsed ? new Date(key.lastUsed).toLocaleDateString() : 'N/A';
                    
                    row.innerHTML = `
                        <td>${key.phoneNumber || 'N/A'}</td>
                        <td class="code-cell">${key.key}</td>
                        <td>${createdDate}</td>
                        <td>${lastUsedDate}</td>
                        <td>${key.usageCount || 0}</td>
                        <td>
                            <label class="switch">
                                <input type="checkbox" class="key-toggle" data-key="${key.key}" ${!key.disabled ? 'checked' : ''}>
                                <span class="slider"></span>
                            </label>
                        </td>
                    `;
                    
                    apiKeysBody.appendChild(row);
                });
                
                // Add event listeners to toggle switches
                document.querySelectorAll('.key-toggle').forEach(toggle => {
                    toggle.addEventListener('change', toggleApiKey);
                });
                
                // Show table and hide loading
                apiKeysLoading.style.display = 'none';
                apiKeysTable.style.display = 'table';
            } catch (error) {
                console.error('Error loading API keys:', error);
                showAlert(apiKeysAlert, 'Failed to load API keys: ' + error.message, false);
                apiKeysLoading.style.display = 'none';
            }
        }
        
        async function toggleApiKey(event) {
            const apiKeysAlert = document.getElementById('api-keys-alert');
            const toggle = event.target;
            const apiKey = toggle.dataset.key;
            const enabled = toggle.checked;
            
            try {
                const response = await fetch('/admin/toggle-api-key', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        key: apiKey,
                        disabled: !enabled
                    })
                });
                
                if (!response.ok) {
                    throw new Error('Failed to update API key status');
                }
                
                const result = await response.json();
                showAlert(apiKeysAlert, result.message, true);
            } catch (error) {
                console.error('Error toggling API key:', error);
                showAlert(apiKeysAlert, 'Error toggling API key: ' + error.message, false);
                toggle.checked = !enabled; // Revert toggle
            }
        }
        
        // ====== WhatsApp Status ======
        async function checkWhatsAppStatus(isTabView = false) {
            const statusDot = document.getElementById(isTabView ? 'whatsapp-status-dot-tab' : 'whatsapp-status-dot');
            const statusText = document.getElementById(isTabView ? 'whatsapp-status-text-tab' : 'whatsapp-status-text');
            const qrContainer = document.getElementById(isTabView ? 'qr-container-tab' : 'qr-container');
            
            try {
                statusDot.className = 'status-dot connecting';
                statusText.textContent = 'Checking status...';
                
                const response = await fetch('/admin/whatsapp-status');
                
                if (!response.ok) {
                    throw new Error('Failed to check WhatsApp status');
                }
                
                const status = await response.json();
                
                if (status.state === 'CONNECTED') {
                    statusDot.className = 'status-dot online';
                    statusText.textContent = 'Connected';
                    qrContainer.style.display = 'none';
                } else if (status.state === 'DISCONNECTED') {
                    statusDot.className = 'status-dot offline';
                        statusText.textContent = 'Disconnected';
                        qrContainer.style.display = 'none';
                    } else if (status.state === 'CONNECTING') {
                        statusDot.className = 'status-dot connecting';
                        statusText.textContent = 'Connecting...';
                        qrContainer.style.display = 'none';
                    } else if (status.state === 'REQUIRE_QR' && status.qr) {
                        statusDot.className = 'status-dot connecting';
                        statusText.textContent = 'Scan QR Code to Connect';
                        qrContainer.style.display = 'flex';
                        qrContainer.innerHTML = `<img src="data:image/png;base64,${status.qr}" alt="WhatsApp QR Code">`;
                    }
                } catch (error) {
                    console.error('Error checking WhatsApp status:', error);
                    statusDot.className = 'status-dot offline';
                    statusText.textContent = 'Error: ' + error.message;
                }
            }
            
            // ====== Broadcast ======
            async function sendBroadcast(event) {
                event.preventDefault();
                
                const broadcastAlert = document.getElementById('broadcast-alert');
                const messageText = document.getElementById('broadcast-message').value.trim();
                
                if (!messageText) {
                    showAlert(broadcastAlert, 'Please enter a message to broadcast', false);
                    return;
                }
                
                try {
                    const response = await fetch('/broadcast', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            message: messageText,
                            token: token
                        })
                    });
                    
                    if (!response.ok) {
                        throw new Error('Failed to send broadcast');
                    }
                    
                    const result = await response.text();
                    showAlert(broadcastAlert, result, true);
                    document.getElementById('broadcast-message').value = '';
                } catch (error) {
                    console.error('Error sending broadcast:', error);
                    showAlert(broadcastAlert, 'Error sending broadcast: ' + error.message, false);
                }
            }
            
            // ====== Admin Account ======
            async function loadAdminInfo() {
                try {
                    const response = await fetch('/admin/account-info');
                    
                    if (!response.ok) {
                        throw new Error('Failed to load admin info');
                    }
                    
                    const adminInfo = await response.json();
                    document.getElementById('current-username').value = adminInfo.username;
                    document.getElementById('new-username').value = adminInfo.username;
                } catch (error) {
                    console.error('Error loading admin info:', error);
                }
            }
            
            async function updateAdminCredentials(event) {
                event.preventDefault();
                
                const accountAlert = document.getElementById('account-alert');
                const newUsername = document.getElementById('new-username').value.trim();
                const currentPassword = document.getElementById('current-password').value;
                const newPassword = document.getElementById('new-password').value;
                const confirmPassword = document.getElementById('confirm-password').value;
                
                if (!newUsername) {
                    showAlert(accountAlert, 'Username cannot be empty', false);
                    return;
                }
                
                if (!currentPassword) {
                    showAlert(accountAlert, 'Current password is required', false);
                    return;
                }
                
                if (newPassword !== confirmPassword) {
                    showAlert(accountAlert, 'New password and confirmation do not match', false);
                    return;
                }
                
                try {
                    const response = await fetch('/admin/update-credentials', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            currentPassword,
                            newUsername,
                            newPassword,
                            token: token
                        })
                    });
                    
                    if (!response.ok) {
                        const error = await response.json();
                        throw new Error(error.error || 'Failed to update credentials');
                    }
                    
                    const result = await response.json();
                    showAlert(accountAlert, result.message, true);
                    
                    // Clear password fields
                    document.getElementById('current-password').value = '';
                    document.getElementById('new-password').value = '';
                    document.getElementById('confirm-password').value = '';
                    
                    // Update current username
                    document.getElementById('current-username').value = newUsername;
                } catch (error) {
                    console.error('Error updating credentials:', error);
                    showAlert(accountAlert, error.message, false);
                }
            }
            
            // ====== Utility Functions ======
            function showAlert(element, message, isSuccess) {
                element.textContent = message;
                element.className = isSuccess ? 'alert alert-success' : 'alert alert-error';
                element.style.display = 'block';
                
                // Hide after 5 seconds
                setTimeout(() => {
                    element.style.display = 'none';
                }, 5000);
            }
        });
    </script>
</body>
</html> 